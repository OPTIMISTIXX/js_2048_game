{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static Status = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = Array.from({\n        length: 4\n    }, ()=>Array(4).fill(0))){\n        this.state = [\n            ...initialState\n        ];\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n        this.score = 0;\n        this.initialState = [\n            ...initialState\n        ];\n        this.undoStack = []; // Stack to store previous game states\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        this.updateStatus();\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.Status.playing;\n        this.state = this.initialState.concat();\n        this.createRandomTile();\n        this.createRandomTile();\n        this.printTiles();\n    }\n    restart() {\n        this.clearTheBoard();\n        this.printTiles();\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n        this.score = 0;\n        this.undoStack = []; // Clear undo stack on restart\n    }\n    moveRight() {\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        this.saveState();\n        let didTilesMove = false;\n        for(let row = 0; row < 4; row++){\n            let didJustMerged = false;\n            for(let tile = 2; tile >= 0; tile--)if (this.state[row][tile] > 0) {\n                let moveTileBy = 0;\n                let merge = false;\n                while(this.state[row][tile + moveTileBy + 1] === 0)moveTileBy++;\n                if (!didJustMerged && this.state[row][tile + moveTileBy + 1] === this.state[row][tile]) {\n                    moveTileBy++;\n                    merge = true;\n                }\n                if (moveTileBy > 0) {\n                    if (!didJustMerged && merge) {\n                        didJustMerged = true;\n                        const newNumber = this.state[row][tile + moveTileBy] * 2;\n                        this.state[row][tile + moveTileBy] = newNumber;\n                        this.score += newNumber;\n                    } else {\n                        didJustMerged = false;\n                        this.state[row][tile + moveTileBy] = this.state[row][tile];\n                    }\n                    this.state[row][tile] = 0;\n                    didTilesMove = true;\n                }\n            }\n        }\n        if (didTilesMove) this.createRandomTile();\n        return didTilesMove;\n    }\n    moveLeft() {\n        // Check whether we can move\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        this.saveState();\n        // Store info whether we moved anything on the board - we return it\n        let didTilesMove = false;\n        // Iterate through each row\n        for(let row = 0; row < 4; row++){\n            // Info from last iteration - cannot merge twice in a row\n            let didJustMerged = false;\n            // Iterate through each tile in current row\n            for(let tile = 1; tile < 4; tile++)// Check whether the current tile is occupied\n            if (this.state[row][tile] > 0) {\n                // How far we can move this tile\n                let moveTileBy = 0;\n                // Will me merge this tile\n                let merge = false;\n                // Check how far we can move this tile\n                while(this.state[row][tile - moveTileBy - 1] === 0)moveTileBy++;\n                // Check if we can move 1 tile more & merge\n                if (!didJustMerged && this.state[row][tile - moveTileBy - 1] === this.state[row][tile]) {\n                    // Increase distance by 1 and store merge info\n                    moveTileBy++;\n                    merge = true;\n                }\n                // If we are moving the tile\n                if (moveTileBy > 0) {\n                    // If we merge at the end\n                    if (!didJustMerged && merge) {\n                        // Save the merge info for the next iteration\n                        didJustMerged = true;\n                        // Get new bigger tile value after merging\n                        const newNumber = this.state[row][tile - moveTileBy] * 2;\n                        // Change the tile value in the game state\n                        this.state[row][tile - moveTileBy] = newNumber;\n                        // Update game score\n                        this.score += newNumber;\n                    } else {\n                        // Have not merged - remember for next iteration\n                        didJustMerged = false;\n                        // Move the tile\n                        this.state[row][tile - moveTileBy] = this.state[row][tile];\n                    }\n                    // Reset current tile value - We moved it\n                    this.state[row][tile] = 0;\n                    // Store info that we moved tiles\n                    didTilesMove = true;\n                }\n            }\n        }\n        // If we moved anything, create random tile on board\n        if (didTilesMove) this.createRandomTile();\n        // Return whether we moved anything\n        return didTilesMove;\n    }\n    moveUp() {\n        // Check whether we can move\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        this.saveState();\n        // Store info whether we moved anything on the board - we return it\n        let didTilesMove = false;\n        // Iterate through each column\n        for(let column = 0; column < 4; column++){\n            // Info from last iteration - cannot merge twice in a row\n            let didJustMerged = false;\n            // Iterate through each tile in current column\n            for(let tile = 1; tile < 4; tile++)// Check whether the current tile is occupied\n            if (this.state[tile][column] > 0) {\n                // How far we can move this tile\n                let moveTileBy = 0;\n                // Will me merge this tile\n                let merge = false;\n                // Check how far we can move this tile\n                while(tile - moveTileBy - 1 >= 0 && this.state[tile - moveTileBy - 1][column] === 0)moveTileBy++;\n                // Check if we can move 1 tile more & merge\n                if (!didJustMerged && tile - moveTileBy - 1 >= 0 && this.state[tile - moveTileBy - 1][column] === this.state[tile][column]) {\n                    // Increase distance by 1 and store merge info\n                    moveTileBy++;\n                    merge = true;\n                }\n                // If we are moving the tile\n                if (moveTileBy > 0) {\n                    // If we merge at the end\n                    if (!didJustMerged && merge) {\n                        // Save the merge info for the next iteration\n                        didJustMerged = true;\n                        // Get new bigger tile value after merging\n                        const newNumber = this.state[tile - moveTileBy][column] * 2;\n                        // Update the tile value in the game state\n                        this.state[tile - moveTileBy][column] = newNumber;\n                        // Update game score\n                        this.score += newNumber;\n                    } else {\n                        // Have not merged - remember for next iteration\n                        didJustMerged = false;\n                        // Move the tile\n                        this.state[tile - moveTileBy][column] = this.state[tile][column];\n                    }\n                    // Reset current tile value - We moved it\n                    this.state[tile][column] = 0;\n                    // Store info that we moved tiles\n                    didTilesMove = true;\n                }\n            }\n        }\n        // If we moved anything, create random tile on board\n        if (didTilesMove) this.createRandomTile();\n        // Return whether we moved anything\n        return didTilesMove;\n    }\n    moveDown() {\n        // Check whether we can move\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        this.saveState();\n        // Store info whether we moved anything on the board - we return it\n        let didTilesMove = false;\n        // Iterate through each column\n        for(let column = 0; column < 4; column++){\n            // Info from last iteration - cannot merge twice in a row\n            let didJustMerged = false;\n            // Iterate through each tile in current column\n            for(let tile = 2; tile >= 0; tile--)// Check whether the current tile is occupied\n            if (this.state[tile][column] > 0) {\n                // How far we can move this tile\n                let moveTileBy = 0;\n                // Will me merge this tile\n                let merge = false;\n                // Check how far we can move this tile\n                while(tile + moveTileBy + 1 < this.state.length && this.state[tile + moveTileBy + 1][column] === 0)moveTileBy++;\n                // Check if we can move 1 tile more & merge\n                if (!didJustMerged && tile + moveTileBy + 1 < this.state.length && this.state[tile + moveTileBy + 1][column] === this.state[tile][column]) {\n                    // Increase distance by 1 and store merge info\n                    moveTileBy++;\n                    merge = true;\n                }\n                // If we are moving the tile\n                if (moveTileBy > 0) {\n                    // If we merge at the end\n                    if (!didJustMerged && merge) {\n                        // Save the merge info for the next iteration\n                        didJustMerged = true;\n                        // Get new bigger tile value after merging\n                        const newNumber = this.state[tile + moveTileBy][column] * 2;\n                        // Update the tile value in the game state\n                        this.state[tile + moveTileBy][column] = newNumber;\n                        // Update game score\n                        this.score += newNumber;\n                    } else {\n                        // Have not merged - remember for next iteration\n                        didJustMerged = false;\n                        // Move the tile\n                        this.state[tile + moveTileBy][column] = this.state[tile][column];\n                    }\n                    // Reset current tile value - We moved it\n                    this.state[tile][column] = 0;\n                    // Store info that we moved tiles\n                    didTilesMove = true;\n                }\n            }\n        }\n        // If we moved anything, create random tile on board\n        if (didTilesMove) this.createRandomTile();\n        // Return whether we moved anything\n        return didTilesMove;\n    }\n    saveState() {\n        const currentState = this.state.map((row)=>row.slice());\n        this.undoStack.push(currentState);\n    }\n    undo() {\n        if (this.undoStack.length > 0) {\n            this.state = this.undoStack.pop(); // Restore previous state\n            this.printTiles();\n            return true;\n        }\n        return false;\n    }\n    createRandomTile() {\n        let row = this.randomNumber(3);\n        while(!this.state[row].includes(0))row = this.randomNumber(3);\n        let cell = this.randomNumber(3);\n        while(this.state[row][cell] !== 0)cell = this.randomNumber(3);\n        const newState = this.state.map((currentRow)=>currentRow.slice());\n        newState[row][cell] = this.generateCellValue();\n        this.state = newState;\n        this.printTiles();\n    }\n    randomNumber(max) {\n        return Math.round(Math.random() * max);\n    }\n    generateCellValue() {\n        const result = Math.random();\n        return result > 0.9 ? 4 : 2;\n    }\n    updateStatus() {\n        if (this.didPlayerWin()) this.status = $a5fd07fa01589658$var$Game.Status.win;\n        else if (this.didPlayerLose()) this.status = $a5fd07fa01589658$var$Game.Status.lose;\n    }\n    didPlayerWin() {\n        for (const tile of this.state.flat()){\n            if (tile === 2048) return true;\n        }\n        return false;\n    }\n    didPlayerLose() {\n        for (const tile of this.state.flat()){\n            if (tile === 0) return false;\n        }\n        for(let row = 0; row <= 3; row++)for(let tile = 0; tile <= 2; tile++){\n            if (this.state[row][tile] === this.state[row][tile + 1]) return false;\n        }\n        for(let column = 0; column <= 3; column++)for(let tile = 0; tile <= 2; tile++){\n            if (this.state[tile][column] === this.state[tile + 1][column]) return false;\n        }\n        return true;\n    }\n    printTiles() {\n        const cells = document.getElementsByClassName(\"field-cell\");\n        const flatState = this.state.flat();\n        for(let i = 0; i < flatState.length; i++){\n            const currentCell = cells[i];\n            const currentState = flatState[i];\n            if (currentState > 0) {\n                if (currentCell !== undefined) {\n                    currentCell.textContent = currentState;\n                    currentCell.className = `field-cell field-cell--${currentState}`;\n                }\n            } else if (currentCell !== undefined) {\n                currentCell.textContent = \"\";\n                currentCell.className = \"field-cell\";\n            }\n        }\n    }\n    clearTheBoard() {\n        this.state = this.initialState.concat();\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$undoButton = document.querySelector(\".undo\");\n$09e991522ca7e64e$var$initialize();\nfunction $09e991522ca7e64e$var$initialize() {\n    $09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n        if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n            $09e991522ca7e64e$var$button.className = \"button restart\";\n            $09e991522ca7e64e$var$button.textContent = \"Restart\";\n            $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$game.start();\n        } else {\n            $09e991522ca7e64e$var$button.className = \"button start\";\n            $09e991522ca7e64e$var$button.textContent = \"Start\";\n            $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n            document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n            $09e991522ca7e64e$var$game.restart();\n        }\n        document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown);\n    });\n    $09e991522ca7e64e$var$undoButton.addEventListener(\"click\", ()=>{\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.undo();\n        $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$game.getScore());\n    });\n}\nfunction $09e991522ca7e64e$var$handleKeyDown(keyEvent) {\n    keyEvent.preventDefault();\n    let didTilesMove = false;\n    switch(keyEvent.key){\n        case \"ArrowUp\":\n            didTilesMove = $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            didTilesMove = $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowRight\":\n            didTilesMove = $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            didTilesMove = $09e991522ca7e64e$var$game.moveLeft();\n            break;\n    }\n    if (didTilesMove) {\n        $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$game.getScore());\n        const currentGameStatus = $09e991522ca7e64e$var$game.getStatus();\n        if (currentGameStatus === (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).Status.lose) $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        else if (currentGameStatus === (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).Status.win) $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    }\n}\nfunction $09e991522ca7e64e$var$updateScore(newScore) {\n    $09e991522ca7e64e$var$score.textContent = newScore;\n}\n\n\n//# sourceMappingURL=index.0576a41d.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class';\n\nconst game = new Game();\n\nconst button = document.querySelector('.start');\nconst score = document.querySelector('.game-score');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\nconst undoButton = document.querySelector('.undo');\n\ninitialize();\n\nfunction initialize() {\n  button.addEventListener('click', () => {\n    if (button.classList.contains('start')) {\n      button.className = 'button restart';\n      button.textContent = 'Restart';\n      messageStart.classList.add('hidden');\n      game.start();\n    } else {\n      button.className = 'button start';\n      button.textContent = 'Start';\n      messageStart.classList.remove('hidden');\n      messageWin.classList.add('hidden');\n      messageLose.classList.add('hidden');\n      document.removeEventListener('keydown', handleKeyDown);\n      game.restart();\n    }\n    document.addEventListener('keydown', handleKeyDown);\n  });\n\n  undoButton.addEventListener('click', () => {\n    messageLose.classList.add('hidden');\n    game.undo();\n    updateScore(game.getScore());\n  });\n}\n\nfunction handleKeyDown(keyEvent) {\n  keyEvent.preventDefault();\n\n  let didTilesMove = false;\n\n  switch (keyEvent.key) {\n    case 'ArrowUp':\n      didTilesMove = game.moveUp();\n      break;\n    case 'ArrowDown':\n      didTilesMove = game.moveDown();\n      break;\n    case 'ArrowRight':\n      didTilesMove = game.moveRight();\n      break;\n    case 'ArrowLeft':\n      didTilesMove = game.moveLeft();\n      break;\n  }\n\n  if (didTilesMove) {\n    updateScore(game.getScore());\n\n    const currentGameStatus = game.getStatus();\n\n    if (currentGameStatus === Game.Status.lose) {\n      messageLose.classList.remove('hidden');\n    } else if (currentGameStatus === Game.Status.win) {\n      messageWin.classList.remove('hidden');\n    }\n  }\n}\n\nfunction updateScore(newScore) {\n  score.textContent = newScore;\n}\n","'use strict';\n\nclass Game {\n  static Status = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = Array.from({ length: 4 }, () => Array(4).fill(0)),\n  ) {\n    this.state = [...initialState];\n    this.status = Game.Status.idle;\n    this.score = 0;\n    this.initialState = [...initialState];\n    this.undoStack = []; // Stack to store previous game states\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    this.updateStatus();\n\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.Status.playing;\n    this.state = this.initialState.concat();\n    this.createRandomTile();\n    this.createRandomTile();\n    this.printTiles();\n  }\n\n  restart() {\n    this.clearTheBoard();\n    this.printTiles();\n    this.status = Game.Status.idle;\n    this.score = 0;\n    this.undoStack = []; // Clear undo stack on restart\n  }\n\n  moveRight() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    let didTilesMove = false;\n\n    for (let row = 0; row < 4; row++) {\n      let didJustMerged = false;\n\n      for (let tile = 2; tile >= 0; tile--) {\n        if (this.state[row][tile] > 0) {\n          let moveTileBy = 0;\n          let merge = false;\n\n          while (this.state[row][tile + moveTileBy + 1] === 0) {\n            moveTileBy++;\n          }\n\n          if (\n            !didJustMerged &&\n            this.state[row][tile + moveTileBy + 1] === this.state[row][tile]\n          ) {\n            moveTileBy++;\n            merge = true;\n          }\n\n          if (moveTileBy > 0) {\n            if (!didJustMerged && merge) {\n              didJustMerged = true;\n\n              const newNumber = this.state[row][tile + moveTileBy] * 2;\n\n              this.state[row][tile + moveTileBy] = newNumber;\n              this.score += newNumber;\n            } else {\n              didJustMerged = false;\n              this.state[row][tile + moveTileBy] = this.state[row][tile];\n            }\n            this.state[row][tile] = 0;\n            didTilesMove = true;\n          }\n        }\n      }\n    }\n\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    return didTilesMove;\n  }\n\n  moveLeft() {\n    // Check whether we can move\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    // Store info whether we moved anything on the board - we return it\n    let didTilesMove = false;\n\n    // Iterate through each row\n    for (let row = 0; row < 4; row++) {\n      // Info from last iteration - cannot merge twice in a row\n      let didJustMerged = false;\n\n      // Iterate through each tile in current row\n      for (let tile = 1; tile < 4; tile++) {\n        // Check whether the current tile is occupied\n        if (this.state[row][tile] > 0) {\n          // How far we can move this tile\n          let moveTileBy = 0;\n\n          // Will me merge this tile\n          let merge = false;\n\n          // Check how far we can move this tile\n          while (this.state[row][tile - moveTileBy - 1] === 0) {\n            moveTileBy++;\n          }\n\n          // Check if we can move 1 tile more & merge\n          if (\n            !didJustMerged &&\n            this.state[row][tile - moveTileBy - 1] === this.state[row][tile]\n          ) {\n            // Increase distance by 1 and store merge info\n            moveTileBy++;\n            merge = true;\n          }\n\n          // If we are moving the tile\n          if (moveTileBy > 0) {\n            // If we merge at the end\n            if (!didJustMerged && merge) {\n              // Save the merge info for the next iteration\n              didJustMerged = true;\n\n              // Get new bigger tile value after merging\n              const newNumber = this.state[row][tile - moveTileBy] * 2;\n\n              // Change the tile value in the game state\n              this.state[row][tile - moveTileBy] = newNumber;\n\n              // Update game score\n              this.score += newNumber;\n            } else {\n              // Have not merged - remember for next iteration\n              didJustMerged = false;\n\n              // Move the tile\n              this.state[row][tile - moveTileBy] = this.state[row][tile];\n            }\n\n            // Reset current tile value - We moved it\n            this.state[row][tile] = 0;\n\n            // Store info that we moved tiles\n            didTilesMove = true;\n          }\n        }\n      }\n    }\n\n    // If we moved anything, create random tile on board\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    // Return whether we moved anything\n    return didTilesMove;\n  }\n\n  moveUp() {\n    // Check whether we can move\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    // Store info whether we moved anything on the board - we return it\n    let didTilesMove = false;\n\n    // Iterate through each column\n    for (let column = 0; column < 4; column++) {\n      // Info from last iteration - cannot merge twice in a row\n      let didJustMerged = false;\n\n      // Iterate through each tile in current column\n      for (let tile = 1; tile < 4; tile++) {\n        // Check whether the current tile is occupied\n        if (this.state[tile][column] > 0) {\n          // How far we can move this tile\n          let moveTileBy = 0;\n\n          // Will me merge this tile\n          let merge = false;\n\n          // Check how far we can move this tile\n          while (\n            tile - moveTileBy - 1 >= 0 &&\n            this.state[tile - moveTileBy - 1][column] === 0\n          ) {\n            moveTileBy++;\n          }\n\n          // Check if we can move 1 tile more & merge\n          if (\n            !didJustMerged &&\n            tile - moveTileBy - 1 >= 0 &&\n            this.state[tile - moveTileBy - 1][column] ===\n              this.state[tile][column]\n          ) {\n            // Increase distance by 1 and store merge info\n            moveTileBy++;\n            merge = true;\n          }\n\n          // If we are moving the tile\n          if (moveTileBy > 0) {\n            // If we merge at the end\n            if (!didJustMerged && merge) {\n              // Save the merge info for the next iteration\n              didJustMerged = true;\n\n              // Get new bigger tile value after merging\n              const newNumber = this.state[tile - moveTileBy][column] * 2;\n\n              // Update the tile value in the game state\n              this.state[tile - moveTileBy][column] = newNumber;\n\n              // Update game score\n              this.score += newNumber;\n            } else {\n              // Have not merged - remember for next iteration\n              didJustMerged = false;\n\n              // Move the tile\n              this.state[tile - moveTileBy][column] = this.state[tile][column];\n            }\n\n            // Reset current tile value - We moved it\n            this.state[tile][column] = 0;\n\n            // Store info that we moved tiles\n            didTilesMove = true;\n          }\n        }\n      }\n    }\n\n    // If we moved anything, create random tile on board\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    // Return whether we moved anything\n    return didTilesMove;\n  }\n\n  moveDown() {\n    // Check whether we can move\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    // Store info whether we moved anything on the board - we return it\n    let didTilesMove = false;\n\n    // Iterate through each column\n    for (let column = 0; column < 4; column++) {\n      // Info from last iteration - cannot merge twice in a row\n      let didJustMerged = false;\n\n      // Iterate through each tile in current column\n      for (let tile = 2; tile >= 0; tile--) {\n        // Check whether the current tile is occupied\n        if (this.state[tile][column] > 0) {\n          // How far we can move this tile\n          let moveTileBy = 0;\n\n          // Will me merge this tile\n          let merge = false;\n\n          // Check how far we can move this tile\n          while (\n            tile + moveTileBy + 1 < this.state.length &&\n            this.state[tile + moveTileBy + 1][column] === 0\n          ) {\n            moveTileBy++;\n          }\n\n          // Check if we can move 1 tile more & merge\n          if (\n            !didJustMerged &&\n            tile + moveTileBy + 1 < this.state.length &&\n            this.state[tile + moveTileBy + 1][column] ===\n              this.state[tile][column]\n          ) {\n            // Increase distance by 1 and store merge info\n            moveTileBy++;\n            merge = true;\n          }\n\n          // If we are moving the tile\n          if (moveTileBy > 0) {\n            // If we merge at the end\n            if (!didJustMerged && merge) {\n              // Save the merge info for the next iteration\n              didJustMerged = true;\n\n              // Get new bigger tile value after merging\n              const newNumber = this.state[tile + moveTileBy][column] * 2;\n\n              // Update the tile value in the game state\n              this.state[tile + moveTileBy][column] = newNumber;\n\n              // Update game score\n              this.score += newNumber;\n            } else {\n              // Have not merged - remember for next iteration\n              didJustMerged = false;\n\n              // Move the tile\n              this.state[tile + moveTileBy][column] = this.state[tile][column];\n            }\n\n            // Reset current tile value - We moved it\n            this.state[tile][column] = 0;\n\n            // Store info that we moved tiles\n            didTilesMove = true;\n          }\n        }\n      }\n    }\n\n    // If we moved anything, create random tile on board\n    if (didTilesMove) {\n      this.createRandomTile();\n    }\n\n    // Return whether we moved anything\n    return didTilesMove;\n  }\n\n  saveState() {\n    const currentState = this.state.map((row) => row.slice());\n\n    this.undoStack.push(currentState);\n  }\n\n  undo() {\n    if (this.undoStack.length > 0) {\n      this.state = this.undoStack.pop(); // Restore previous state\n      this.printTiles();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  createRandomTile() {\n    let row = this.randomNumber(3);\n\n    while (!this.state[row].includes(0)) {\n      row = this.randomNumber(3);\n    }\n\n    let cell = this.randomNumber(3);\n\n    while (this.state[row][cell] !== 0) {\n      cell = this.randomNumber(3);\n    }\n\n    const newState = this.state.map((currentRow) => currentRow.slice());\n\n    newState[row][cell] = this.generateCellValue();\n    this.state = newState;\n    this.printTiles();\n  }\n\n  randomNumber(max) {\n    return Math.round(Math.random() * max);\n  }\n\n  generateCellValue() {\n    const result = Math.random();\n\n    return result > 0.9 ? 4 : 2;\n  }\n\n  updateStatus() {\n    if (this.didPlayerWin()) {\n      this.status = Game.Status.win;\n    } else if (this.didPlayerLose()) {\n      this.status = Game.Status.lose;\n    }\n  }\n\n  didPlayerWin() {\n    for (const tile of this.state.flat()) {\n      if (tile === 2048) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  didPlayerLose() {\n    for (const tile of this.state.flat()) {\n      if (tile === 0) {\n        return false;\n      }\n    }\n\n    for (let row = 0; row <= 3; row++) {\n      for (let tile = 0; tile <= 2; tile++) {\n        if (this.state[row][tile] === this.state[row][tile + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let column = 0; column <= 3; column++) {\n      for (let tile = 0; tile <= 2; tile++) {\n        if (this.state[tile][column] === this.state[tile + 1][column]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  printTiles() {\n    const cells = document.getElementsByClassName('field-cell');\n    const flatState = this.state.flat();\n\n    for (let i = 0; i < flatState.length; i++) {\n      const currentCell = cells[i];\n      const currentState = flatState[i];\n\n      if (currentState > 0) {\n        if (currentCell !== undefined) {\n          currentCell.textContent = currentState;\n          currentCell.className = `field-cell field-cell--${currentState}`;\n        }\n      } else {\n        if (currentCell !== undefined) {\n          currentCell.textContent = '';\n          currentCell.className = 'field-cell';\n        }\n      }\n    }\n  }\n\n  clearTheBoard() {\n    this.state = this.initialState.concat();\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$parcel$interopDefault","a","__esModule","default","$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","Status","idle","playing","win","lose","constructor","initialState","Array","from","length","fill","state","status","score","undoStack","getScore","getState","getStatus","updateStatus","start","concat","createRandomTile","printTiles","restart","clearTheBoard","moveRight","saveState","didTilesMove","row","didJustMerged","tile","moveTileBy","merge","newNumber","moveLeft","moveUp","column","moveDown","currentState","map","slice","push","undo","pop","randomNumber","includes","cell","newState","currentRow","generateCellValue","max","Math","round","random","result","didPlayerWin","didPlayerLose","flat","cells","document","getElementsByClassName","flatState","i","currentCell","undefined","textContent","className","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$undoButton","$09e991522ca7e64e$var$handleKeyDown","keyEvent","preventDefault","key","$09e991522ca7e64e$var$updateScore","currentGameStatus","classList","remove","newScore","addEventListener","contains","add","removeEventListener"],"version":3,"file":"index.0576a41d.js.map"}